---
#### only for ssh fence
- name: Check if ssh keys should be distributed
  stat: path={{ hdfs_ssh_known_hosts_file }}
  register: host_file_status

- name: Add hadoop user on first namenode only and generate an ssh key
  user: name={{hdfs_user}} generate_ssh_key="{{ hdfs_ssh_fence }}"
  register: created_user
  when: inventory_hostname == hdfs_namenodes[0]

- name: Set distribute keys variable
  set_fact: distribute_keys={{not host_file_status.stat.exists or hdfs_redistribute_ssh_keys or created_user.changed}}

- name: Fetch private key
  fetch: src={{ hdfs_user_home }}/.ssh/id_rsa dest=rsa_key
  when: inventory_hostname == hdfs_namenodes[0] and distribute_keys
  check_mode: no

- name: Fetch public key
  fetch: src={{ hdfs_user_home }}/.ssh/id_rsa.pub dest=rsa_key
  when: inventory_hostname == hdfs_namenodes[0] and distribute_keys
  check_mode: no

- name: Create .ssh directory for {{hdfs_user}}
  file: path={{ hdfs_user_home }}/.ssh state=directory owner={{hdfs_user}} group={{hdfs_group}} mode=0700
  when: distribute_keys

- name: Copy private key to all machines
  copy: src=rsa_key/{{hdfs_namenodes[0]}}{{ hdfs_user_home }}/.ssh/id_rsa dest={{ hdfs_user_home }}/.ssh/id_rsa owner={{hdfs_user}} group={{hdfs_group}} mode=0600
  when: distribute_keys

- name: Add pubkeys to master server
  authorized_key: user={{hdfs_user}} key="{{ lookup('file', 'rsa_key/{{hdfs_namenodes[0]}}{{ hdfs_user_home }}/.ssh/id_rsa.pub') }}"
  when: distribute_keys

- name: Make sure the known hosts file exists
  file: path={{ hdfs_ssh_known_hosts_file }} state=touch owner={{hdfs_user}} group={{hdfs_group}} mode=0644
  when: (not host_file_status.stat.exists) or (distribute_keys and host_file_status.stat.mode == "0644")
  changed_when: (not host_file_status.stat.exists) or host_file_status.stat.mode != "0644"

- set_fact: hdfs_namenodes_long={{ hdfs_namenodes }}

- name: Add long names to namenodes for proper key deployment
  set_fact: hdfs_namenodes_long={{ hdfs_namenodes_long | map('regex_replace', '(.*)', '\\1.' + hdfs_host_domain_name ) | list}}
  when: hdfs_host_domain_name is defined

- name: Check host name availability
  shell: "ssh-keygen -f {{ hdfs_ssh_known_hosts_file }} -F {{ item }}"
  with_items: "{{ hdfs_namenodes_long }}"
  when: distribute_keys
  register: ssh_known_host_results
  ignore_errors: yes
  changed_when: False
  tags:
    - skip_ansible_lint

- name: Scan the public key
  shell: "ssh-keyscan -H -T 10 {{ item.item }} >> {{ hdfs_ssh_known_hosts_file }}"
  with_items: "{{ ssh_known_host_results.results }}"
  when: item.stdout is defined and item.stdout == ""
  no_log: True

- name: Delete key locally
  local_action: file path=rsa_key state=absent
  when: inventory_hostname == hdfs_namenodes[0] and distribute_keys
  become: no
